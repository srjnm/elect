basePath: /
definitions:
  dto.CandidateResultsDTO:
    properties:
      candidate_id:
        type: string
      display_picture:
        type: string
      election_id:
        type: string
      name:
        type: string
      sex:
        type: integer
      user_id:
        type: string
      votes:
        type: integer
    type: object
  dto.CastVoteDTO:
    properties:
      candidate_id:
        type: string
      election_id:
        type: string
    required:
    - candidate_id
    - election_id
    type: object
  dto.ChangePasswordDTO:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    required:
    - current_password
    - new_password
    type: object
  dto.CreateElectionDTO:
    properties:
      ending_at:
        type: string
      gender_specific:
        type: boolean
      locking_at:
        type: string
      starting_at:
        type: string
      title:
        type: string
    required:
    - ending_at
    - locking_at
    - starting_at
    - title
    type: object
  dto.CreateResetTokenDTO:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.DeleteParticipantDTO:
    properties:
      election_id:
        type: string
      participant_id:
        type: string
    required:
    - election_id
    - participant_id
    type: object
  dto.EditElectionDTO:
    properties:
      election_id:
        type: string
      ending_at:
        type: string
      gender_specific:
        type: boolean
      locking_at:
        type: string
      starting_at:
        type: string
      title:
        type: string
    required:
    - election_id
    type: object
  dto.Elections:
    properties:
      election_id:
        type: string
      ending_at:
        type: string
      gender_specific:
        type: boolean
      locking_at:
        type: string
      starting_at:
        type: string
      title:
        type: string
    type: object
  dto.GeneralCandidateDTO:
    properties:
      approved:
        type: boolean
      candidate_id:
        type: string
      display_picture:
        type: string
      election_id:
        type: string
      first_name:
        type: string
      id_proof:
        type: string
      last_name:
        type: string
      poster:
        type: string
      register_no:
        type: string
      sex:
        type: integer
      user_id:
        type: string
    type: object
  dto.GeneralElectionDTO:
    properties:
      candidates:
        items:
          $ref: '#/definitions/dto.GeneralCandidateDTO'
        type: array
      election_id:
        type: string
      ending_at:
        type: string
      gender_specific:
        type: boolean
      locking_at:
        type: string
      participants:
        items:
          $ref: '#/definitions/dto.GeneralParticipantDTO'
        type: array
      starting_at:
        type: string
      title:
        type: string
    type: object
  dto.GeneralElectionResultsDTO:
    properties:
      candidate_results:
        items:
          $ref: '#/definitions/dto.CandidateResultsDTO'
        type: array
      election_id:
        type: string
      ending_at:
        type: string
      fcandidate_results:
        items:
          $ref: '#/definitions/dto.CandidateResultsDTO'
        type: array
      gender_specific:
        type: boolean
      locking_at:
        type: string
      mcandidate_results:
        items:
          $ref: '#/definitions/dto.CandidateResultsDTO'
        type: array
      ocandidate_results:
        items:
          $ref: '#/definitions/dto.CandidateResultsDTO'
        type: array
      participants:
        items:
          $ref: '#/definitions/dto.GeneralParticipantDTO'
        type: array
      starting_at:
        type: string
      title:
        type: string
    type: object
  dto.GeneralParticipantDTO:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      participant_id:
        type: string
      register_number:
        type: string
      user_id:
        type: string
    type: object
  dto.GeneralStudentDTO:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      reg_number:
        type: string
      user_id:
        type: string
      verified:
        type: boolean
    type: object
  dto.Login:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      email:
        type: string
      message:
        type: string
    type: object
  dto.OTP:
    properties:
      email:
        type: string
      otp:
        type: string
    required:
    - email
    - otp
    type: object
  dto.OTPResponse:
    properties:
      email:
        type: string
      message:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  dto.ResetPasswordDTO:
    properties:
      new_password:
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  dto.Response:
    properties:
      message:
        type: string
    type: object
  dto.Verify:
    properties:
      password:
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
host: e1ect.herokuapp.com
info:
  contact:
    email: surajnm15@gmail.com
    name: ELECT API Support
  description: This is the backend server of ELECT web application.
  title: ELECT REST API
  version: "1.0"
paths:
  /api/candidate:
    post:
      operationId: enrollCandidate
      parameters:
      - in: formData
        name: election_id
        required: true
        type: string
      - in: formData
        name: sex
        required: true
        type: integer
      - description: Display Picture
        in: formData
        name: display_picture
        required: true
        type: file
      - description: poster
        in: formData
        name: poster
        required: true
        type: file
      - description: ID Proof
        in: formData
        name: id_proof
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Enroll as a candidate for the election you are part of
      tags:
      - candidate
  /api/candidate/approve/{id}:
    post:
      operationId: approveCandidate
      parameters:
      - description: Candidate ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Approve enrolled candidates to the election you created
      tags:
      - candidate
  /api/candidate/unapprove/{id}:
    post:
      operationId: unapproveCandidate
      parameters:
      - description: Candidate ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Unapprove enrolled candidates to the election you created
      tags:
      - candidate
  /api/election:
    post:
      operationId: election
      parameters:
      - description: Election Details
        in: body
        name: election
        required: true
        schema:
          $ref: '#/definitions/dto.CreateElectionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Create Election if you are an Admin
      tags:
      - election
    put:
      operationId: election
      parameters:
      - description: Edit Election
        in: body
        name: election
        required: true
        schema:
          $ref: '#/definitions/dto.EditElectionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Edit the election you created
      tags:
      - election
  /api/election/{id}:
    delete:
      operationId: electionP
      parameters:
      - description: Election ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Delete the election you created
      tags:
      - election
    get:
      operationId: electionP
      parameters:
      - description: Election ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GeneralElectionDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Get details of the election you created or you are part of
      tags:
      - election
  /api/elections:
    get:
      operationId: elections
      parameters:
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Order By - starting_at
        in: query
        name: orderby
        type: string
      - description: Order - asc or desc
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Elections'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Get a list of election you are part of OR you have created
      tags:
      - election
  /api/participant:
    delete:
      operationId: participant
      parameters:
      - description: Delete Participant
        in: body
        name: participant
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteParticipantDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Delete the participant of the election you created
      tags:
      - participant
  /api/participants/{id}:
    post:
      operationId: addParticipants
      parameters:
      - description: Election ID
        in: path
        name: id
        required: true
        type: string
      - description: Participants List
        in: formData
        name: participants
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Add participants to the election you created
      tags:
      - participant
  /api/registeredstudent/{id}:
    delete:
      operationId: deleteRegisteredStudent
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Delete the student you have registered
      tags:
      - user
  /api/registeredstudents:
    get:
      operationId: registeredStudents
      parameters:
      - description: Page
        in: query
        name: page
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Order By - reg_number
        in: query
        name: orderby
        type: string
      - description: Order - asc or desc
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.GeneralStudentDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Get a list of Students you've registered
      tags:
      - user
  /api/registerstudents:
    post:
      operationId: registerStudents
      parameters:
      - description: Student List
        in: formData
        name: register
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Register Students if you are an Admin
      tags:
      - user
  /api/results/{id}:
    get:
      operationId: getElectionResults
      parameters:
      - description: Election ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GeneralElectionResultsDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Get the results of the election you were part of or you created
      tags:
      - election
  /api/vote:
    post:
      operationId: castVote
      parameters:
      - description: Cast Vote
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/dto.CastVoteDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Cast vote to the candidate of the election you are part of
      tags:
      - participant
  /changepassword:
    post:
      operationId: changePassword
      parameters:
      - description: Change Password
        in: body
        name: changePassword
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Change your password
      tags:
      - auth
  /createresettoken:
    post:
      operationId: createResetToken
      parameters:
      - description: Email
        in: body
        name: createResetToken
        required: true
        schema:
          $ref: '#/definitions/dto.CreateResetTokenDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Create a reset token and send email to reset password
      tags:
      - auth
  /login:
    post:
      operationId: login
      parameters:
      - description: User Login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: User Login
      tags:
      - auth
  /logout:
    post:
      description: A user has to be logged in currently to access this endpoint.
      operationId: logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: User Logout
      tags:
      - auth
  /otp:
    post:
      operationId: submitOTP
      parameters:
      - description: Verify OTP
        in: body
        name: otp
        required: true
        schema:
          $ref: '#/definitions/dto.OTP'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.OTPResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Submit OTP
      tags:
      - auth
  /refresh:
    post:
      description: A user needs a valid refresh token to access this endpoint.
      operationId: refresh
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Refresh Token
      tags:
      - auth
  /resetpassword:
    post:
      operationId: resetPassword
      parameters:
      - description: Reset Password
        in: body
        name: createResetToken
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Reset password if you have a valid token
      tags:
      - auth
  /resettoken/{token}:
    post:
      operationId: checkResetTokenValidity
      parameters:
      - description: Reset Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Check if reset token is valid or not
      tags:
      - auth
  /setpassword:
    post:
      operationId: verify
      parameters:
      - description: Verify
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/dto.Verify'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Verify Email and Set Password
      tags:
      - auth
  /verifytoken/{token}:
    post:
      operationId: checkVerifyTokenValidity
      parameters:
      - description: Verify Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.Response'
      summary: Check if verify token is valid or not
      tags:
      - auth
swagger: "2.0"
